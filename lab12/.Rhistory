theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 8)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3))
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(Longitude, Latitude))+
labs(x = "Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.title.x = element_text(hjust=0.5, size = 8)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3))
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(Longitude, Latitude))+
labs(x = "Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 8)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3))
uso_map <- ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(Longitude, Latitude))+
labs(x = "Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 8)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3))->
ggsave(filename = "map.svg", device = "svg", plot = gg, height = 5, width = 7)
uso_map <- ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(Longitude, Latitude))+
labs(x = "Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 8)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) ->
ggsave(filename = "map.svg", device = "svg", plot = gg, height = 5, width = 7)
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(Longitude, Latitude))+
labs(x = "Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 8)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map
ggsave(filename = "map.svg", device = "svg", plot = uso_map, height = 5, width = 7)
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv"))
spiders %>%
select(Latitude, Longitude) %>%
summary()
library(devtools)
library(ggmap)
library(tidyverse)
library(rgeos)
library(rgdal)
library(here)
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv"))
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv")) %>% clean_names()
spiders %>%
select(latitude, longitude)
detach("package:albersusa", unload = TRUE)
detach("package:gdtools", unload = TRUE)
detach("package:maptools", unload = TRUE)
detach("package:rgeos", unload = TRUE)
detach("package:rgdal", unload = TRUE)
detach("package:usethis", unload = TRUE)
library(tidyverse)
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv")) %>% clean_names()
spiders %>%
select(latitude, longitude) %>%
summary()
install.packages(c("boot", "broom", "class", "cli", "cluster", "cpp11", "data.table", "dbplyr", "deldir", "dplyr", "fastmap", "forcats", "htmltools", "kableExtra", "knitr", "leiden", "MASS", "matrixStats", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgload", "promises", "rappdirs", "RcppArmadillo", "renv", "reprex", "rmarkdown", "RSQLite", "Seurat", "shiny", "SparseM", "spatial", "spatstat.data", "spatstat.utils", "xfun"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(here)
library(janitor)
library(lubridate)
files <- list.files(path = "data/spiders", pattern = ".csv") #Inside data, then spiders folder. Look for any files that are .csv
files
files <- list.files(path = "data/spiders", pattern = ".csv", full.names = TRUE)
files
spider_list <- lapply(files, read_csv) #Importing files into a list using lapply
#Applying read_csv to all files in spider_list
View(spider_list)
spider_list[[3]] #Look at object 3, so all records for Butte county
class(spider_list[[3]])
names(spider_list[[3]])
names(spider_list[[3]])
#All column names for object 3
#Can check to see that names match up
names(spider_list[[1]])
names <- list.files(path = "data/spiders", pattern = ".csv")
names_list <- strsplit(names, split = " .csv")
names_list
names_vec <- unlist(names_list)
names_vec
names(spider_list) <- names_vec #Putting these names into spider list
names(spider_list)
spider_list$Butte
spiders_all <- bind_rows(spider_list)
spiders_all
table_A <- read_csv(here("lab12", "data", "table_A.csv"))
table_B <- read_csv(here("lab12", "data", "table_B.csv"))
View(table_A)
View(table_B)
inner_exampleDF <- inner_join(table_A, table_B, by="customer_ID") #Joining data by the one column they have in common, "customer_ID"
inner_exampleDF
View(inner_exampleDF)
left_exampleDF <- left_join(table_A, table_B, by="customer_ID")
left_exampleDF
right_exampleDF <- right_join(table_A, table_B, by="customer_ID")
right_exampleDF
full_exampleDF <- full_join(table_A, table_B, by="customer_ID")
full_exampleDF
semi_exampleDF <- semi_join(table_A, table_B, by="customer_ID")
semi_exampleDF
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("shiny")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(palmerpenguins)
runApp("plot_iris.R")
names(penguins)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
reactive({input$x
input$y})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
names(homerange)
names(homerange)
homerange %>%
ggplot(aes(x = locomotion, fill = trophic.guild))+
geom_bar(position = "dodge")
homerange %>%
ggplot(aes(x = locomotion, fill = thermoregulation))+
geom_bar(position = "dodge")
#Type in shinyapp for this option to pop up
#Spelling really counts on choices = c()!
#Sometimes code wont run because of a missing parenthesis, so watch out for those!
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild")
plotOutput("plot", width = "600px", height = "500px")
#Type in shinyapp for this option to pop up
#Spelling really counts on choices = c()!
#Sometimes code wont run because of a missing parenthesis, so watch out for those!
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"))
plotOutput("plot", width = "600px", height = "500px")
)
#Type in shinyapp for this option to pop up
#Spelling really counts on choices = c()!
#Sometimes code wont run because of a missing parenthesis, so watch out for those!
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild")
plotOutput("plot", width = "600px", height = "500px")
#Type in shinyapp for this option to pop up
#Spelling really counts on choices = c()!
#Sometimes code wont run because of a missing parenthesis, so watch out for those!
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable") #Removing X and Y axis
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
anti_exampleDF <- anti_join(table_A, table_B, by="customer_ID")
library(tidyverse)
library(here)
library(janitor)
library(lubridate)
anti_exampleDF <- anti_join(table_A, table_B, by="customer_ID")
anti_exampleDF
View(spiders_all)
spiders_locs <- read_csv("data/spiders locations/spiders_locations.csv")
spiders_locs
spiders_with_locs <- left_join(spiders_all, spiders_locs, by = c("Accession"))
summary(spiders_with_locs)
#Often use left_join, so did so for this case
#spiders_all because that's the merged data from our list
#Second data to merge with is spiders_with_locs
#Merge by Accession (make sure you spell this right!)
spiders_with_locs <- left_join(spiders_all, spiders_locs, by = c("Accession"))
spiders_with_locs
#Often use left_join, so did so for this case
#spiders_all because that's the merged data from our list
#Second data to merge with is spiders_with_locs
#Merge by Accession (make sure you spell this right!)
class(spiders_with_locs$Date)
View(spiders_all)
View(spiders_all)
View(spiders_locs)
View(spiders_with_locs)
day <- today()
str(day)
#str is structure
datetime <- now()
datetime
dmy(spiders_with_locs$Date)
#dmy = day, month, year
as.Date(spiders_with_locs$Date, format = "%d/%m/%y")
dateformat1 <- "20200922"
dateformat2 <- "09-22-2020"
dateformat3 <- "22/09/2020"
dateformat4 <- "09-22-2020 17:00:00"
dateformat5 <- "20200922 170000"
ymd(dateformat1)
mdy(dateformat2)
dmy(dateformat3)
mdy_hms(dateformat4)
ymd_hms(dateformat5)
write.csv(spiders_with_locs, file = "spiders_with_locs.csv", row.names = FALSE)
install.packages("devtools")
library(devtools)
devtools::install_github("dkahle/ggmap")
install.packages("albersusa")
install.packages("remotes")
library(remotes)
install.packages("remotes")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("albersusa")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("remotes")
library(remotes)
install.packages("albersusa")
remotes::install_git("https://git.rud.is/hrbrmstr/albersusa.git")
remotes::install_git("https://git.sr.ht/~hrbrmstr/albersusa")
remotes::install_gitlab("hrbrmstr/albersusa")
remotes::install_bitbucket("hrbrmstr/albersusa")
#install.packages("remotes")
library(remotes)
library(remotes)
install_github("alberusa")
library(remotes)
library(devtools)
install_github("alberusa")
install.packages("albersusa")
remotes::install_gitlab("hrbrmstr/albersusa")
remotes::install_git("https://git.rud.is/hrbrmstr/albersusa.git")
remotes::install_git("")
remotes::install_git("https://git.rud.is/hrbrmstr/albersusa.git",
credentials=git2r::cred_user_pass("bkdegroe", "Bract37!ANC:)"))
library(albersusa)
devtools::install_github("dkahle/ggmap")
library(ggmap)
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(remotes)
install.packages("ggmap")
install_github("alberusa")
remotes::install_git("https://git.rud.is/hrbrmstr/albersusa.git")
install.packages("albersusa")
remotes::install_git("https://git.sr.ht/~hrbrmstr/albersusa")
remotes::install_gitlab("hrbrmstr/albersusa")
library(albersusa)
library(ggmap)
library(tidyverse)
library(here)
library(janitor)
library(ggmap)
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv")) %>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
install.packages("devtools")
library(devtools)
install.packages("fs")
install.packages("usethis")
install.packages("usethis")
library(devtools)
library(usethis)
library(devtools)
devtools::install_github("dkahle/ggmap")
install.packages("albersusa")
devtools::install_github("hrbrmstr/albersusa")
devtools::install_github("hrbrmstr/albersusa")
force = 'TRUE'
devtools::install_github("hrbrmstr/albersusa", force = TRUE)
library(tidyverse)
library(here)
library(janitor)
library(ggmap)
install.packages(c("boot", "cluster", "data.table", "lubridate", "MASS", "mgcv"))
install.packages("lubridate")
library(devtools)
library(usethis)
library(devtools)
library(tidyverse)
library(here)
library(janitor)
library(ggmap)
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv")) %>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
lat <- c(34.67, 41.80) #Concatenating min and max
long <- c(-124.1, -115.5)
bbox <- make_bbox(long, lat, f = 0.05) #f is a way of slightly expanding bounding box beyond coordinates. If you don't do this, sometimes you'll have coordinates on the edge of the map and it doesn't look nice
map1 <- get_map(bbox, maptype = "terrain", source = "stamen") #Maptype: one of the options. Source is because stamen is free and opensource, otherwise Google wants your credit card number. Don't give Google your credit card number lol
ggmap(map1)
map2 <- get_map(bbox, maptype = "watercolor", source = "stamen")
ggmap(map2)
ggmap(map1) + #Adding layers
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map3 <- get_map(bbox, maptype = "toner-lite", source = "stamen")
ggmap(map3) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
ggmap(map3) +
geom_point(data = spiders, aes(longitude, latitude), size = 0.5) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
ggmap(map3) +
geom_point(data = spiders, aes(longitude, latitude), size = 0.5, alpha = 0.7, color = "blue") +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
library(albersusa)
us_comp <- usa_sf() # get a composite map of the USA
cnty_comp <- counties_sf() # get a composite map of USA counties
ggplot() +
geom_sf(data = us_comp, size = 0.125) +
theme_linedraw()+
labs(title = "USA State Boundaries")
ca_comp <- us_comp %>%
filter(name=="California")
ca_cnty_comp <- cnty_comp %>%
filter(state=="California")
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map #Putting everything into a new object called uso_map
ggsave(filename = "map.svg", device = "svg", plot = uso_map, height = 5, width = 7) #Different filetypes to export your plot. Svg is good to export because it's infinietely scalable
install.packages("svglite")
library(svglite)
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map #Putting everything into a new object called uso_map
ggsave(filename = "map.svg", device = "svg", plot = uso_map, height = 5, width = 7) #Different filetypes to export your plot. Svg is good to export because it's infinietely scalable
View(spiders_with_locs)
#In some localities, says "cave," but no column if there's anything in a cave, so need to revisit package
spiders <- spiders %>%
mutate(troglo=if_else(str_detect(locality, "Cave"), "troglo", "epig"))
#Use dplyr version of if_else
#If you find in the locality column, a string of characters that matches cave, put troglo and if not, put in EPIG
spiders
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude, color = troglo, shape=troglo))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude, color = troglo, shape=troglo))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(1.1, 0.3)) -> uso_map #Adjust legend position as well!
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude, color = troglo, shape = troglo))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(1.1, 0.3)) -> uso_map #Adjust legend position as well!
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude, color = troglo, shape = troglo))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(1.1, 0.3)) -> uso_map #Adjust legend position as well!
uso_map
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(ggmap)
library(albersusa)
getwd()
grizzly <- read_csv(here("lab12", "data", "bear-sightings.csv")) %>% clean_names()
glimpse(grizzly)
grizzly %>%
select(latitude, longitude) %>%
summary()
glimpse(grizzly)
grizzly %>%
select(latitude, longitude) %>%
summary()
lat <- c(55.02, 70.37)
long <- c(-166.2, -131.3)
bbox <- make_bbox(long, lat, f = 0.05)
stamen <- read_csv(here("lab12", "data", "wolves_data", "wolves_dataset.csv")) %>% clean_names()
wolves <- read_csv(here("lab12", "data", "wolves_data", "wolves_dataset.csv")) %>% clean_names()
map_grizzly <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map_grizzly)
ggmap(map_grizzly) +
geom_point(data = grizzly, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Grizzly Bear Sightings")
ggmap(map_grizzly) +
geom_point(data = grizzly, aes(longitude, latitude), size=0.7) +
labs(x = "Longitude", y = "Latitude", title = "Grizzly Bear Sightings")
glimpse(wolves)
View(wolves)
