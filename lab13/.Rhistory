geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
sidebarLayout(
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
mainPanel(
plotOutput("taxonPlot")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
UC_admit <- read_csv(here("data/UC_admit.csv")) %>% clean_names()
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
UC_admit <- read_csv(here("data/UC_admit.csv")) %>% clean_names()
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
glimpse(UC_admit)
dim(UC_admit)
names(UC_admit)
sapply(UC_admit, class)
naniar::miss_var_summary(UC_admit)
UC_admit %>%
summarize(number_nas = sum(is.na(UC_admit)))
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
?rm.na
??rm.na
?na.rm
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point(na.rm = T)+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
UC_admit %>%
ggplot(aes(x = ethnicity, fill = category))+
geom_bar(position = "dodge")
UC_admit %>%
ggplot(aes(x = ethnicity, fill = filtered_count_fr))+
geom_bar(position = "dodge")
UC_admit %>%
ggplot(aes(x = ethnicity, fill = perc_fr))+
geom_bar(position = "dodge")
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point(na.rm = T)+
labs(title = "#Ethnicity vs. Filtered Count",
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
glimpse(UC_admit)
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point(na.rm = T)+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
library(shiny)
ui <- fluidPage(titlePanel("Admissions By Ethnicity For UC Campuses"),
radioButtons("x", "Select Fill Variable", choices = c("ethnicity", "filtered_count_fr", "campus"), selected = "ethnicity"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "ethnicity", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#Type in shinyapp for this option to pop up
#Spelling really counts on choices = c()!
#Sometimes code wont run because of a missing parenthesis, so watch out for those!
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable") #Removing X and Y axis
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.") #This references where data came from
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.") #This references where data came from
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Admissions By Ethnicity For UC Campuses"),
radioButtons("x", "Select Fill Variable", choices = c("ethnicity", "filtered_count_fr", "campus"), selected = "ethnicity"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "ethnicity", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "filtered_count_fr"), selected = "campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "ethnicity")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
library(trekcolors)
library(ggplot2)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
library(trekcolors)
library(ggplot2)
library(ggthemes)
library(paletteer)
options(scipen=999)
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
glimpse(UC_admit)
dim(UC_admit)
names(UC_admit)
sapply(UC_admit, class)
naniar::miss_var_summary(UC_admit)
UC_admit %>%
summarize(number_nas = sum(is.na(UC_admit)))
UC_admit_no_all <- UC_admit %>%
filter(ethnicity !="All")
UC_admit_no_all
UC_admit_no_all %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit_no_all %>%
filter(academic_yr==input$x & campus==input$y & category==input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit_no_all$academic_yr <- as.factor(UC_admit_no_all$academic_yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit_no_all %>%
filter(campus==input$x & ethnicity==input$y & category==input$z) %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit_no_all %>%
filter(academic_yr==input$x & campus==input$y & category==input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
