data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install()                            # To install core packages or update installed packages
# BiocManager::install(c("ShortRead", "Biostrings"))# Install specific packages
library(ShortRead)
library(Biostrings)
reads <- readFasta("data/archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
gc_content
data_files2 <- list.files("data/archaea-dna")
data_files2
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
for (i in 1:length(data_files2)){
reads <- readFasta("data/archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
GC_results$file_name[i] <- data_files2[i]
GC_results$gc_content[i] <- gc_content
}
GC_results
library(qtl)
library(qtlcharts)
knitr::opts_chunk$set(fig.width=8, fig.height=6, message=FALSE)
sug <- read.cross("csv", "https://rqtl.org", "sug.csv",
genotypes=c("CC", "CB", "BB"), alleles=c("C", "B")) #Specifying genotype you have
summary(sug)
head(sug$pheno)
#Also specifies ID of mouse. so counts as phenotype
#Have sex, but all mice are male, hence why it's 1
#Quantitative traits: bp, hr, bw, heart_wt
nind(sug)    # No. individuals
nphe(sug)    # No. phenotypes
nchr(sug)    # No. chromosomes
totmar(sug)  # Total markers
nmar(sug)    # No. markers on each chromosome
plot(sug)
sug <- calc.genoprob(sug, step=1) #Indicates density used for calculation, or centimorgan
out.em <- scanone(sug)
out.em2 <- scanone(sug, pheno.col=1:4)
#Dropping phenotypes, so when assessing differences, it will use the first phenotype (ex. in this case blood pressure)
summary(out.em)
summary(out.em2)
data(grav)
summary(grav)
plotMap(grav)
iplotMap(grav)
head(grav$pheno)
iplotCorr(grav$pheno)
iplotCurves(grav$pheno)
times1 <- as.numeric(sub("T", "", phenames(grav)))/60
times1
times <- attr(grav, "time")
times
#?attr
phe <- grav$pheno
head(phe)
knitr::opts_chunk$set(echo = TRUE)
asd <- read_csv(here("ASD meta abundance 2.csv"))
getwd()
asd <- read_csv(here("ASD meta abundance 2 copy.csv"))
library(tidyverse)
library(janitor)
library(here)
library(naniar)
asd <- read_csv(here("ASD meta abundance 2 copy.csv"))
asd <- read_csv(here("Berlin/ASD meta abundance 2 copy.csv"))
library(tidyverse)
library(janitor)
library(here)
library(naniar)
asd <- read_csv(here("Berlin/ASD meta abundance 2 copy.csv"))
View(asd)
glimpse(asd)
summary(asd)
names(asd)
asd_longer <- asd %>%
pivot_longer(-Taxonomy, names_to = "Condition", values_to = "Abundance")%>%
asd_longer <- asd %>%
pivot_longer(-Taxonomy, names_to = "Condition", values_to = "Abundance")
asd_longer <- asd %>%
pivot_longer(-Taxonomy, names_to = "Condition", values_to = "Abundance")
asd_longer
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
library(here)
getwd()
collar_data <- read_csv(here("data/us_individual_collar_data")) %>% clean_names()
collar_data <- read_csv(here("data/us_individual_collar_data"))
collar_data <- read_csv(here("lab14/data/us_individual_collar_data"))
collar_data <- read_csv(here("lab14/data/us_individual_collar_data.csv"))
collar_data <- read_csv(here("lab14/data/us_individual_collar_data"))
collar_data <- list.files("data/us_individual_collar_data")
collar_data <- list.files("data/us_individual_collar_data")
collar_data
library(tidyverse)
library(ggmap)
library(lubridate)
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
i <- 1
while(is.numeric(iris2[ , i])){
iris2[ , i] <- iris2[ , i] * 10
i <- i + 1
}
head(iris2)
for (i in 1:10) {
print(i)
}
data3 <- data                       # Replicate example data
data3
for(i in 1:2) {           # for-loop over columns
data3[ , i] <- data3[ , i] + 100
}
data3
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris                                          # Replicate iris data set
for(i in c(2,4)){
iris3[ , i] <- iris3[ , i] * 10
}
head(iris3)
for(i in 1:ncol(iris3)){
if(str_detect(colnames(iris3)[i], "Width")){
iris3[ , i] <- iris3[ , i] * 10
}
}
head(iris3)
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
# create an empty vector to store those counts
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# how to show them on a map?
# summary table
data_list <- lapply(data_files3, read_csv)
collar_data_all <- bind_rows(data_list)
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install()                            # To install core packages or update installed packages
# BiocManager::install(c("ShortRead", "Biostrings"))# Install specific packages
library(ShortRead)
library(Biostrings)
reads <- readFasta("data/archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
gc_content
data_files2 <- list.files("data/archaea-dna")
data_files2
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
for (i in 1:length(data_files2)){
reads <- readFasta("data/archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
GC_results$file_name[i] <- data_files2[i]
GC_results$gc_content[i] <- gc_content
}
GC_results
#install.packages("qtl")
#install.packages("qtlcharts")
for (i in 1:length(collar_data)){
data0 <- as.data.frame(read_csv(collar_data[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
head(collar_data)
collar_data <- list.files("data/us_individual_collar_data", full.names = TRUE)
collar_data
View(collar_data_all)
for (i in 1:length(collar_data)){
collar_data_1 <- as.data.frame(read_csv(collar_data[i]))
print(
ggplot(collar_data, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
)
}
for (i in 1:length(collar_data)){}
collar_data_1 <- as.data.frame(read_csv(collar_data[i]))
print(
ggplot(collar_data, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
)
for (i in 1:length(collar_data)){
collar_data_1 <- as.data.frame(read_csv(collar_data[i]))
print(
ggplot(collar_data, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
)
}
View(collar_data_1)
View(collar_data_all)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
collar_data <- list.files("data/us_individual_collar_data", full.names = TRUE)
collar_data
head(collar_data)
for (i in 1:length(collar_data)){
collar_data_1 <- as.data.frame(read_csv(collar_data[i]))
print(
ggplot(collar_data_1, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
)
}
for (i in 1:length(collar_data)){
collar_data_1 <- as.data.frame(read_csv(collar_data[i]))
print(
ggplot(collar_data_1, aes(x = long,y = lat, color = time))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
)
}
View(collar_data_1)
names <- list.files(path = "data/us_individual_collar_data", pattern = ".csv")
names_list <- strsplit(names, split = ".csv")
names_list
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = ".txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(collar_data_1) <- names_vec
names(collar_data) <- names_vec
names(collar_data)
collar_data_all <- bind_rows(collar_data)
collar_data_all
?lapply
collar_data_list <- lapply(collar_data, read_csv)
collar_data_all <- bind_rows(collar_data)
collar_data_all
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
collar_data <- list.files("data/us_individual_collar_data", full.names = TRUE)
collar_data
head(collar_data)
for (i in 1:length(collar_data)){
collar_data_1 <- as.data.frame(read_csv(collar_data[i]))
print(
ggplot(collar_data_1, aes(x = long,y = lat, color = time))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
)
}
collar_data_all <- bind_rows(collar_data)
rlang::last_error()
(collar_data_all <- bind_rows(collar_data))
collar_data_list <- lapply(collar_data, read_csv)
(collar_data_all <- bind_rows(collar_data)
collar_data_list <- lapply(collar_data, read_csv)
(collar_data_all <- bind_rows(collar_data))
collar_data_all <- bind_rows(collar_data)
rlang::last_error()
rlang::last_trace()
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
collar_data_all <- bind_rows(collar_data)
collar_data_all <- bind_rows[collar_data]
collar_data_all <- bind_rows(collar_data)
View(collar_data_list)
collar_data_all <- bind_rows(collar_data_1)
collar_data_all
collar_data_all %>%
summarize(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(36.08, 41.47)
long <- c(-118.11, -111.08)
bbox <- make_bbox(long, lat, f= 0.05)
map1 <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map1)
ggmap(map1) +
ggplot(collar_data_1, aes(x = long,y = lat, color = time))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
ggmap(map1) +
ggplot(collar_data_1, aes(long,lat, color = time))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
ggmap(map1) +
ggplot(collar_data_1, aes(long,lat))+
geom_path()+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
ggmap(map1) +
geom_path(collar_data_1, aes(long,lat))+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
ggmap(map1) +
geom_path()+
geom_point(collar_data_1, aes(long,lat))+
labs(title = collar_data[i], x = "longitude", y = "latitude")
ggmap(map1) +
geom_path(data = collar_data, aes(long, lat))+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
ggmap(map1) +
geom_path(data = collar_data_1, aes(long, lat))+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
ggmap(map1) +
geom_path(data = collar_data_1, aes(long, lat,color=time))+
geom_point()+
labs(title = collar_data[i], x = "longitude", y = "latitude")
ggmap(map1) +
geom_path(data = collar_data_1, aes(long, lat,color=time))+
geom_point(data = collar_data_1, aes(long, lat,color=time))+
labs(title = collar_data[i], x = "longitude", y = "latitude")
for (i in 1:length(collar_data)){
collar_data_1 <- as.data.frame(read_csv(collar_data[i]))
print(
ggmap(map1)+
geom_path(data = collar_data_1, aes(long, lat,color=time))+
geom_point(data = collar_data_1, aes(long, lat,color=time))+
labs(title = collar_data[i], x = "longitude", y = "latitude")
)
}
?hyper
data(hyper)
summar(hyper)
summary(hyper)
iplotMap(sug)
iplotMap(hyper)
View(hyper)
tabyl(hyper, markers)
nmar(hyper)
iplotMap(hyper)
iplotMap(hyper$hypertension)
iplotMap(hyper)
plotMissing(hyper, main = "", reorder=1)
drop.nullmarkers(hyper)
nmar(hyper)
nmar(hyper)
drop.nullmarkers(hyper)
#totmar() gives #total markers
nmar(hyper)
hyper_drop <- drop.nullmarkers(hyper)
#totmar() gives #total markers
hyper_drop <- drop.nullmarkers(hyper)
hyper_drop
#totmar() gives #total markers
nmar(hyper_drop)
?out.em
hyper_calc <- calc.genoprob(hyper, step=1)
out.em <- scanone(hyper)
hyper_calc <- calc.genoprob(hyper, step=1)
hyper_calc <- calc.genoprob(hyper, step=1)
hyper_calc
out.em <- scanone(sug)
out.em <- scanone(hyper)
out.em
out,em2 <- scanone(hyper, pheno.col = 1:4)
out.em2 <- scanone(hyper, pheno.col = 1:4)
out.em2 <- scanone(hyper, pheno.col = 1:2)
out.em2 <- scanone(hyper, pheno.col = 1:3)
out.em2 <- scanone(hyper, pheno.col = 1:2)
summary(out.em)
max(out.em)
iplotScanone(out.em)
out.em_attempt <- out.em %>%
filter(lod >= "1")
summary(out.em_attempt)
iplotScanone(out.em_attempt)
max(out.em_attempt)
htmlwidgets::saveWidget(out.em_attempt, file="hyper_iplotScanone.html")
htmlwidgets::saveWidget(out.em_attempt, hyper file="hyper_iplotScanone.html")
htmlwidgets::saveWidget(out.em_attempt, file="hyper_iplotScanone.html")
htmlwidgets::saveWidget(out.em_attempt, file="hyper_iplotScanone.html")
out.em_attempt_scanone <- iplotScanone(out.em_attempt)
out.em_attempt_scanone
htmlwidgets::saveWidget(out.em_attempt_scanone, file="hyper_iplotScanone.html")
