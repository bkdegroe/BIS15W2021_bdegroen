penguins
penguins %>%
summarise(distinct_species = n_distinct(species),
distinct_island = n_distinct(island),
distinct_sex = n_distinct(sex))
penguins %>%
summarise(across(c(species, island, sex),
n_distinct))
install.packages(c("backports", "BH", "broom", "callr", "codetools", "colorspace", "cowplot", "cpp11", "crosstalk", "DBI", "dbplyr", "dplyr", "fansi", "foreign", "gdtools", "generics", "ggplot2", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "janitor", "KernSmooth", "knitr", "labeling", "leaflet", "lubridate", "Matrix", "nlme", "pkgbuild", "pkgload", "processx", "ps", "Rcpp", "rgdal", "rlang", "rmarkdown", "rvest", "sf", "sp", "stars", "testthat", "tibble", "tidyr", "tinytex", "tmap", "tmaptools", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "callr", "codetools", "colorspace", "cowplot", "cpp11", "crosstalk", "DBI", "dbplyr", "dplyr", "fansi", "foreign", "gdtools", "generics", "ggplot2", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "janitor", "KernSmooth", "knitr", "labeling", "leaflet", "lubridate", "Matrix", "nlme", "pkgbuild", "pkgload", "processx", "ps", "Rcpp", "rgdal", "rlang", "rmarkdown", "rvest", "sf", "sp", "stars", "testthat", "tibble", "tidyr", "tinytex", "tmap", "tmaptools", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "callr", "codetools", "colorspace", "cowplot", "cpp11", "crosstalk", "DBI", "dbplyr", "dplyr", "fansi", "foreign", "gdtools", "generics", "ggplot2", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "janitor", "KernSmooth", "knitr", "labeling", "leaflet", "lubridate", "Matrix", "nlme", "pkgbuild", "pkgload", "processx", "ps", "Rcpp", "rgdal", "rlang", "rmarkdown", "rvest", "sf", "sp", "stars", "testthat", "tibble", "tidyr", "tinytex", "tmap", "tmaptools", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "callr", "codetools", "colorspace", "cowplot", "cpp11", "crosstalk", "DBI", "dbplyr", "dplyr", "fansi", "foreign", "gdtools", "generics", "ggplot2", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "janitor", "KernSmooth", "knitr", "labeling", "leaflet", "lubridate", "Matrix", "nlme", "pkgbuild", "pkgload", "processx", "ps", "Rcpp", "rgdal", "rlang", "rmarkdown", "rvest", "sf", "sp", "stars", "testthat", "tibble", "tidyr", "tinytex", "tmap", "tmaptools", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "callr", "codetools", "colorspace", "cowplot", "cpp11", "crosstalk", "DBI", "dbplyr", "dplyr", "fansi", "foreign", "gdtools", "generics", "ggplot2", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "janitor", "KernSmooth", "knitr", "labeling", "leaflet", "lubridate", "Matrix", "nlme", "pkgbuild", "pkgload", "processx", "ps", "Rcpp", "rgdal", "rlang", "rmarkdown", "rvest", "sf", "sp", "stars", "testthat", "tibble", "tidyr", "tinytex", "tmap", "tmaptools", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "callr", "codetools", "colorspace", "cowplot", "cpp11", "crosstalk", "DBI", "dbplyr", "dplyr", "fansi", "foreign", "gdtools", "generics", "ggplot2", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "janitor", "KernSmooth", "knitr", "labeling", "leaflet", "lubridate", "Matrix", "nlme", "pkgbuild", "pkgload", "processx", "ps", "Rcpp", "rgdal", "rlang", "rmarkdown", "rvest", "sf", "sp", "stars", "testthat", "tibble", "tidyr", "tinytex", "tmap", "tmaptools", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "callr", "codetools", "colorspace", "cowplot", "cpp11", "crosstalk", "DBI", "dbplyr", "dplyr", "fansi", "foreign", "gdtools", "generics", "ggplot2", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "janitor", "KernSmooth", "knitr", "labeling", "leaflet", "lubridate", "Matrix", "nlme", "pkgbuild", "pkgload", "processx", "ps", "Rcpp", "rgdal", "rlang", "rmarkdown", "rvest", "sf", "sp", "stars", "testthat", "tibble", "tidyr", "tinytex", "tmap", "tmaptools", "withr", "xfun"))
penguins %>%
summarise(across(c(species, island, sex),
n_distinct))
library("tidyverse")
install.packages(c("ape", "backports", "BH", "bit64", "callr", "caTools", "cli", "clipr", "codetools", "colorspace", "cowplot", "cpp11", "crosstalk", "data.table", "DBI", "dbplyr", "deldir", "digest", "doParallel", "dplyr", "fansi", "fitdistrplus", "foreach", "foreign", "Formula", "future", "future.apply", "generics", "ggplot2", "ggrepel", "ggridges", "globals", "glue", "gplots", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "isoband", "iterators", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "leiden", "lmtest", "magrittr", "Matrix", "matrixStats", "nlme", "openssl", "patchwork", "pbapply", "pillar", "pkgbuild", "plotly", "processx", "ps", "R6", "Rcpp", "RcppAnnoy", "RcppEigen", "RcppHNSW", "readr", "renv", "reticulate", "rlang", "rmarkdown", "rprojroot", "RSQLite", "rstudioapi", "sctransform", "Seurat", "spatstat.data", "spatstat.utils", "statmod", "stringi", "testthat", "tibble", "tidyr", "tinytex", "uwot", "vctrs", "withr", "xfun"))
library("tidyverse")
library("janitor")
#install.packages("skimr")
library("skimr")
?msleep
names(msleep)
remotes::install_github("allisonhorst/palmerpenguins")
install.packages("remotes")
remotes::install_github("allisonhorst/palmerpenguins")
head(msleep)
large <- msleep %>%
select(name, genus, bodywt, sleep_total) %>%
filter(bodywt > 200) %>%
arrange(desc(bodywt))
large
mean(large$sleep_total)
msleep24 <- msleep %>%
mutate(sleep_total_24=sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(mame !="NA", vore !="NA", sleep_total_24 !="NA") %>%
filter(sleep_total_24 < "0.3") %>%
arrange(desc(sleep_total_24))
msleep24 <- msleep %>%
mutate(sleep_total_24=sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(name !="NA", vore !="NA", sleep_total_24 !="NA") %>%
filter(sleep_total_24 < "0.3") %>%
arrange(desc(sleep_total_24))
summary(msleep24)
skim(msleep24)
hist(msleep24)
tably(msleep24)
tabyl(msleep24)
msleep24 <- msleep %>%
mutate(sleep_total_24=sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(!is.na(vore)) %>%
filter(sleep_total_24 < "0.3") %>%
arrange(desc(sleep_total_24))
summary(msleep24)
skim(msleep24)
hist(msleep24)
library("tidyverse")
library("janitor")
#install.packages("skimr")
library("skimr")
?msleep
names(msleep)
#Remember, ? before a command will tell you what it is!
remotes::install_github("allisonhorst/palmerpenguins")
#Original code I used. It didn't work for histograms or tabyl because the NAs weren't taken out properly. It will look for the string NA, not the values:
#msleep24 <- msleep %>%
#  mutate(sleep_total_24=sleep_total/24) %>%
#  select(name, vore, sleep_total_24) %>%
#  filter(name !="NA", vore !="NA", sleep_total_24 !="NA") %>%
#  filter(sleep_total_24 < "0.3") %>%
#  arrange(desc(sleep_total_24))
msleep24 <- msleep %>%
mutate(sleep_total_24=sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(!is.na(vore)) %>%
filter(sleep_total_24 < "0.3") %>%
arrange(desc(sleep_total_24))
summary(msleep24)
skim(msleep24)
hist(msleep24)
msleep24 <- msleep %>%
mutate(sleep_total_24=sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(!is.na(vore)) %>%
filter(sleep_total_24 < 0.3) %>%
arrange(desc(sleep_total_24))
summary(msleep24)
summary(msleep24)
skim(msleep24)
hist(msleep24$sleep_total_24)
msleep24 %>%
tabyl(vore) %>%
adorn_pct_formatting(digits=2)
#Adorn changes formating of how the percentages are shown
msleep24 %>%
tabyl(vore) %>%
adorn_pct_formatting(digits=1)
#Adorn changes formating of how the percentages are shown
names(msleep24)
msleep24 %>%
tabyl(vore)
msleep %>%
tabyl(vore)
msleep %>%
filter(is.na(vore)) %>%
tabyl(vore)
#Valid percent: dealing with NAs a little bit. Considering there are NAs, take care of that in advance by inserting the filter is.na
msleep %>%
filter(is.na(vore)) %>%
tabyl(vore)
msleep %>%
tabyl(vore)
#Valid percent: dealing with NAs a little bit. Considering there are NAs, take care of that in advance in the next code chunk:
msleep %>%
filter(is.na(vore)) %>%
tabyl(order, vore)
msleep %>%
filter(!is.na(vore)) %>%
tabyl(order, vore)
head(msleep)
large <- msleep %>%
select(name, genus, bodywt, sleep_total) %>%
filter(bodywt > 200) %>%
arrange(desc(bodywt))
large
mean(large$sleep_total)
msleep %>%
filter(bodywt > 200) %>%
summarize(mean_sleep_lg = mean(sleep_total))
#First call dataframe. Pipe to filters (so restricting yourself to large animals). Then use summarize. The first part is giving a name to the new variable you're producing. This will equal the mean of sleep_total
msleep %>%
filter(bodywt > 200) %>%
summarize(mean_sleep_lg = mean(sleep_total),
min_sleep_lg = min(sleep_total),
max_sleep_lg = max(sleep_total),
total = n())
msleep %>%
filter(order=="Primates") %>%
summarize(mean_bodywt = mean(bodywt),
min_bodywt = min(bodywt),
max_bodywt = max(bodywt),
total = n())
msleep %>%
filter(order=="Primates") %>%
summarize(mean_bodywt = mean(bodywt),
min_bodywt = min(bodywt),
max_bodywt = max(bodywt),
n_samples=n())
dim(msleep)
msleep %>%
filter(bodywt > 100) %>%
summarise(n_genera=n_distinct(genus))
msleep %>%
summarise(n_genera=n_distinct(genus))
library("tidyverse")
library("janitor")
library("skimr")
library("palmerpenguins")
glimpse(penguins)
penguins %>%
group_by(island) %>%
summarize(mean_body_mass_g=mean(body_mass_g),
n=n())
penguins %>%
group_by(island) %>%
summarize(number_NAs=sum(is.na(body_mass_g)))
penguins %>%
filter(!is.na(body_mass_g)) %>%
group_by(island) %>%
summarize(mean_body_mass_g=mean(body_mass_g),
sd_body_mass_g=sd(body_mass_g),
n=n())
names(penguins)
penguins %>%
group_by(island, species) %>% #By island and species, you see how many species are there for each island. Keep in mind if you reverse the order, you get a little bit of a different result by reordering the columns.
summarize(n=n(), .groups= 'keep')#the .groups argument here just prevents a warning message
msleep %>%
filter(order=="Mammals") %>%
summarize(mean_sleep_total = mean(sleep_total),
min_sleep_total = min(sleep_total),
max_sleep_total = max(sleep_total),
n_sleep_total=n())
penguins %>%
count(island, sort = T) #sort=T sorts the column in descending order
# sort = T means sort equals true. If you campare this with summarize and group by, you get the same result. Count is a combination of group by and summarize, it's just a shorthand way of doing it
penguins %>%
count(island, sort = F)
#False doesn't change the output substantially
penguins %>%
count(island, species, sort = T) #sort=T sorts the column in descending order
# sort = T means sort equals true. If you campare this with summarize and group by, you get the same result. Count is a combination of group by and summarize, it's just a shorthand way of doing it.
penguins %>%
count(island, species, sort = F)
#False doesn't change the output substantially
penguins %>%
group_by(island) %>%
summarize(n=n())
penguins %>%
count(island, species, sort = F)
penguins %>%
tabyl(species, island)
penguins %>%
tabyl(island, species)
penguins %>%
tabyl(species, island) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1) %>%
adorn_ns()
msleep %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g ) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_Length_mm==mean(bill_length_mm))
msleep %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g ) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_Length_mm==mean(bill_length_mm), na.rm=T)
msleep %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g ) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_Length_mm==mean(bill_length_mm), na.rm=T)
msleep %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_Length_mm==mean(bill_length_mm), na.rm=T)
msleep %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_Length_mm=mean(bill_length_mm), na.rm=T)
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_Length_mm=mean(bill_length_mm), na.rm=T)
#na.rm = Remove NAs
penguins %>%
summarize(mean_bill_length_mm=mean(bill_length_mm, na.rm=T))
#When you do a summarize function, you're making a new thing. There is no variable for mean length etc.
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_Length_mm=mean(bill_length_mm, na.rm=T))
#na.rm = Remove NAs
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_Length_mm=mean(bill_length_mm, na.rm=T)) %>%
summarize(mean_bill_depth_mm=mean(bill_depth_mm, na.rm=T)) %>%
summarize(mean_flipper_length_mm=mean(bill_length_mm, na.rm=T)) %>%
summarize(mean_body_mass_g=mean(body_mass_g, na.rm=T))
penguins %>%
group_by(species) %>% #Want to know how value compares between species
summarize(mean_bill_length_mm=mean(bill_length_mm, na.rm=T))
penguins %>%
summarize(distinct_species = n_distinct(species),
distinct_island = n_distinct(island),
distinct_sex = n_distinct(sex))
penguins %>%
summarize(across(c(species, island, sex), n_distinct))
penguins %>%
summarize(across(c(species, island, sex), n_distinct))
#Summarize, across, the combination of species, island, and sex, and then the function you want it to run
penguins %>%
summarize(across(contains("mm"), mean, na.rm=T))
#Summarize across any column that contains mm (length, widt, etc.), then mean as the function, then removing NA variables
penguins %>%
group_by(sex) %>%
summarize(across(contains("mm"), mean, na.rm=T))
penguins %>%
summarise_all(n_distinct)
penguins %>%
summarise(across(!c(species, island, sex), n_distinct))
penguins %>%
summarise(across(starts_with("bill"), n_distinct))
penguins %>%
group_by(species) %>%
summarize(across(contains("mm"), mean, na.rm=T),
nsamples=n())
penguins %>%
group_by(species) %>%
summarize(across(contains("mm"), sd, na.rm=T),
nsamples=n())
penguins %>%
summarize(mean_flipper_length_mm=mean(flipper_length_mm, na.rm=T)
penguins %>%
summarize(mean_flipper_length_mm=mean(flipper_length_mm, na.rm=T))
penguins %>%
group_by(species) %>% #Want to know how value compares between species
summarize(mean_bill_length_mm=mean(bill_length_mm, na.rm=T))
library("tidyverse")
library("janitor")
#install.packages("skimr")
library("skimr")
?msleep
names(msleep)
#Remember, ? before a command will tell you what it is!
remotes::install_github("allisonhorst/palmerpenguins")
msleep24 <- msleep %>%
mutate(sleep_total_24=sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(!is.na(vore)) %>%
filter(sleep_total_24 < 0.3) %>%
arrange(desc(sleep_total_24))
summary(msleep24)
skim(msleep24)
skim(msleep24)
hist(msleep24$sleep_total_24)
msleep24 %>%
tabyl(vore) %>%
adorn_pct_formatting(digits=1)
#Adorn changes formating of how the percentages are shown
names(msleep24)
msleep %>%
tabyl(vore)
#Valid percent: dealing with NAs a little bit. Considering there are NAs, take care of that in advance in the next code chunk:
msleep %>%
filter(!is.na(vore)) %>%
tabyl(order, vore)
#You can simply arrange data table by changing order you insert, ex. tabyl(vore, order)
head(msleep)
#Looking for sleep total variable
large <- msleep %>%
select(name, genus, bodywt, sleep_total) %>%
filter(bodywt > 200) %>%
arrange(desc(bodywt))
large
mean(large$sleep_total)
msleep %>%
filter(bodywt > 200) %>%
summarize(mean_sleep_lg = mean(sleep_total))
#First call dataframe. Pipe to filters (so restricting yourself to large animals). Then use summarize. The first part is giving a name to the new variable you're producing. This will equal the mean of sleep_total
msleep %>%
filter(bodywt > 200) %>%
summarize(mean_sleep_lg = mean(sleep_total),
min_sleep_lg = min(sleep_total),
max_sleep_lg = max(sleep_total),
total = n())
msleep %>%
filter(order=="Primates") %>%
summarize(mean_bodywt = mean(bodywt),
min_bodywt = min(bodywt),
max_bodywt = max(bodywt),
n_samples=n())
dim(msleep)
msleep %>%
filter(order=="Mammals") %>%
summarize(min_sleep_total = min(sleep_total),
max_sleep_total = max(sleep_total),
mean_sleep_total = mean(sleep_total),
n_sleep_total=n())
msleep %>%
filter(order=="Mammals") %>%
summarize(min_sleep_total = min(sleep_total),
max_sleep_total = max(sleep_total),
mean_sleep_total = mean(sleep_total),
n_samples=n())
msleep %>%
summarize(min_sleep_total = min(sleep_total),
max_sleep_total = max(sleep_total),
mean_sleep_total = mean(sleep_total),
n_samples=n())
msleep %>%
group_by(vore) %>% #we are grouping by feeding ecology
summarize(min_bodywt = min(bodywt),
max_bodywt = max(bodywt),
mean_bodywt = mean(bodywt),
total=n())
names(msleep)
msleep %>%
group_by(order) %>%
summarize(mean_brainwt= mean(brainwt))
msleep %>%
group_by(order) %>%
summarize(mean_brainwt= mean(brainwt), na.rn=T)
msleep %>%
group_by(order) %>%
summarize(mean_brainwt= mean(brainwt, na.rn=T))
msleep %>%
group_by(order) %>%
summarize(mean_brainwt= mean(brainwt))
#Summarize/summarise = same thing
msleep %>%
filter(order=="Carnivora") %>%
select(order, brainwt)
msleep %>%
filter(order=="Carnivora") %>%
select(order, genera, brainwt)
msleep %>%
filter(order=="Carnivora") %>%
select(order, genus, brainwt)
msleep %>%
group_by(order) %>%
summarize(mean_brainwt= mean(brainwt, na.rm=T))
msleep %>%
filter(order=="Cetacea") %>%
select(order, genus, brainwt)
library("tidyverse")
library("janitor")
library("skimr")
library("palmerpenguins")
glimpse(penguins)
penguins %>%
group_by(island) %>%
summarize(mean_body_mass_g=mean(body_mass_g),
n=n())
penguins %>%
group_by(island) %>%
summarize(number_NAs=sum(is.na(body_mass_g)))
penguins %>%
filter(!is.na(body_mass_g)) %>%
group_by(island) %>%
summarize(mean_body_mass_g=mean(body_mass_g),
sd_body_mass_g=sd(body_mass_g),
n=n())
names(penguins)
penguins %>%
group_by(island, species) %>% #By island and species, you see how many species are there for each island. Keep in mind if you reverse the order, you get a little bit of a different result by reordering the columns.
summarize(n=n(), .groups= 'keep')#the .groups argument here just prevents a warning message
penguins %>%
count(island, species, sort = T) #sort=T sorts the column in descending order
# sort = T means sort equals true. If you campare this with summarize and group by, you get the same result. Count is a combination of group by and summarize, it's just a shorthand way of doing it.
penguins %>%
count(island, species, sort = F)
#False doesn't change the output substantially
penguins %>%
group_by(island) %>%
summarize(n=n())
penguins %>%
count(island, species, sort = F)
penguins %>%
tabyl(species, island)
penguins %>%
tabyl(island, species)
penguins %>%
tabyl(species, island) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1) %>%
adorn_ns()
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
#na.rm = Remove NAs
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie")
#na.rm = Remove NAs
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_length_mm = mean(bill_length_mm),
mean_bill_depth_mm = mean(bill_depth_mm))
#na.rm = Remove NAs
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_length_mm = mean(bill_length_mm, na.rm = T),
mean_bill_depth_mm = mean(bill_depth_mm, na.rm = T))
#na.rm = Remove NAs
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_length_mm = mean(bill_length_mm, na.rm = T),
mean_bill_depth_mm = mean(bill_depth_mm, na.rm = T),
mean_flipper_length_mm = mean(flipper_length_mm, na.rm = T),
mean_body_mass_g = mean(body_mass_g, na.rm = T))
#na.rm = Remove NAs
penguins %>%
select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %>%
filter(species=="Adelie") %>%
summarize(mean_bill_length_mm = mean(bill_length_mm, na.rm = T),
mean_bill_depth_mm = mean(bill_depth_mm, na.rm = T),
mean_flipper_length_mm = mean(flipper_length_mm, na.rm = T),
mean_body_mass_g = mean(body_mass_g, na.rm = T),
n_samples=n())
#na.rm = Remove NAs
names(penguins)
penguins %>%
group_by(sex) %>%
is.na(sex)
penguins %>%
summarize(distinct_species = n_distinct(species),
distinct_island = n_distinct(island),
distinct_sex = n_distinct(sex))
#Have to provide separate new variables and tell R what to do for each one. The cross command lets us do this across multiple variable all at once! Shown in next chunk.
penguins %>%
summarize(across(c(species, island, sex), n_distinct))
#Summarize, across, the combination of species, island, and sex, and then the function you want it to run.
#Be careful of continous and categorical variables!
penguins %>%
summarize(across(contains("mm"), mean, na.rm=T))
#Summarize across any column that contains mm (length, widt, etc.), then mean as the function, then removing NA variables
penguins %>%
group_by(sex) %>%
summarize(across(contains("mm"), mean, na.rm=T))
penguins %>%
summarise_all(n_distinct)
penguins %>%
summarise(across(!c(species, island, sex), n_distinct))
penguins %>%
summarise(across(starts_with("bill"), n_distinct))
penguins %>%
group_by(species) %>%
summarize(across(contains("mm"), mean, na.rm=T),
nsamples=n())
penguins %>%
group_by(species) %>%
summarize(across(contains("mm"), sd, na.rm=T),
nsamples=n())
